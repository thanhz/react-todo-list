{"version":3,"sources":["TodoItems.tsx","todosData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","undefined","text","todosData","App","updatedTodos","state","todos","map","todo","setState","todoItem","this","data","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAsBeA,MAnBf,SAAkBC,GAOhB,OACE,yBAAKC,UAAU,aACb,2BACEC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAEhD,uBAAGC,MAAOT,EAAMI,KAAKC,UAbF,CACrBK,UAAW,SACXC,MAAO,UACPC,eAAgB,qBAUoCC,GAAab,EAAMI,KAAKU,QCVnEC,EAAY,CACvB,CACEP,GAAI,EACJM,KAAM,aACNT,WAAW,GAEb,CACEG,GAAI,EACJM,KAAM,YACNT,WAAW,GAEb,CACEG,GAAI,EACJM,KAAM,mBACNT,WAAW,GAEb,CACEG,GAAI,EACJM,KAAM,cACNT,WAAW,GAEb,CACEG,GAAI,EACJM,KAAM,kBACNT,WAAW,ICcAW,E,kDAnCb,WAAYhB,GAAW,IAAD,8BACpB,cAAMA,IASRO,aAAe,SAACC,GACd,IAAMS,EAAe,EAAKC,MAAMC,MAAMC,KAAI,SAACC,GACzC,OAAIA,EAAKb,KAAOA,EACP,eACFa,EADL,CAEEhB,WAAYgB,EAAKhB,YAGdgB,KAGT,EAAKC,SAAS,CACZH,MAAOF,KApBT,EAAKC,MAAQ,CACXC,MAAOJ,GAHW,E,qDA0BZ,IAAD,OACDQ,EAAWC,KAAKN,MAAMC,MAAMC,KAAI,SAACK,GAAD,OACpC,kBAAC,EAAD,CAAUC,IAAKD,EAAKjB,GAAIJ,KAAMqB,EAAMlB,aAAc,EAAKA,kBAGzD,OAAO,yBAAKN,UAAU,aAAasB,O,GAhCrBI,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02287d59.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { todosDataType } from \"./todosData\";\r\n\r\nfunction TodoItem(props: { item: todosDataType; handleChange: any }) {\r\n  const completedStyle = {\r\n    fontStyle: \"italic\",\r\n    color: \"#cdcdcd\",\r\n    textDecoration: \"line-through\",\r\n  };\r\n\r\n  return (\r\n    <div className='todo-item'>\r\n      <input\r\n        type='checkbox'\r\n        checked={props.item.completed}\r\n        onChange={() => props.handleChange(props.item.id)}\r\n      />\r\n      <p style={props.item.completed ? completedStyle : undefined }>{props.item.text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","export type todosDataType = {\r\n  id: number,\r\n  text: string,\r\n  completed: boolean,\r\n};\r\n\r\n//Ideally should get JSON from an API\r\nexport const todosData = [\r\n  {\r\n    id: 1,\r\n    text: \"Learn HTML\",\r\n    completed: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"Learn CSS\",\r\n    completed: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"Learn Javascript\",\r\n    completed: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    text: \"Learn React\",\r\n    completed: true,\r\n  },\r\n  {\r\n    id: 5,\r\n    text: \"Apply for a job\",\r\n    completed: false,\r\n  },\r\n];\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoItem from \"./TodoItems\";\nimport { todosData, todosDataType } from \"./todosData\";\n\ntype MyProps = {};\ntype MyState = {\n  todos: todosDataType[];\n};\nclass App extends React.Component<MyProps, MyState> {\n  constructor(props: {}){\n    super(props)\n    this.state = {\n      todos: todosData\n    }\n  }\n  // state: MyState = {\n  //   todos: todosData,\n  // };\n\n  handleChange = (id: number): void | todosDataType => {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo, //id,text,completed\n          completed: !todo.completed //update completed\n        };\n      }\n      return todo;\n    });\n\n    this.setState({\n      todos: updatedTodos,\n    });\n  };\n\n  render() {\n    const todoItem = this.state.todos.map((data) => (\n      <TodoItem key={data.id} item={data} handleChange={this.handleChange} />\n    ));\n\n    return <div className='todo-list'>{todoItem}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}